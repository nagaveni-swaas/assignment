const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    
    if (token == null) return res.sendStatus(401);
 
    jwt.verify(token, SECRET_KEY, (err, user) => {
        if (err) return res.sendStatus(403);
        req.user = user;
        next();
    });
};

app.post('/login', (req, res) => {
    const { email, password } = req.body;
 
    if (!email || !password) {
        return res.status(400).json({ message: 'email and password are required' });
    }
 
    // Find user
    db.query('SELECT * FROM user WHERE email = ?', [email], (err, results) => {
        if (err) return res.status(500).json({ message: 'Database error' });
 
        if (results.length === 0) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }
 
        const users = results[0];
 
        // Check password
        const passwordIsValid = bcrypt.compareSync(password, users.password);
        if (!passwordIsValid) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }
 
        // Create token
        const token = jwt.sign({ userId: users.userId, userName: users.userName }, SECRET_KEY, { expiresIn: '1h' });
 
        res.json({ token });
        
    });
});